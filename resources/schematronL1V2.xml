<?xml version="1.0" encoding="utf-8"?>
<schema xmlns="http://purl.oclc.org/dsdl/schematron" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	queryBinding='xslt' schemaVersion='ISO19757-3'>
	<title>SED-ML Schematron schema</title>
	<p>
		This schema is not a full replacement for the SED-ML XML schema, but
		instead provides
		validation that is not possible in XML schema. This includes:

		1. Non-unique values for 'id' attributes across a document.
		2. Validation of cross-references between elements.
		3. Validation of the relations between attributes of the
		UniformTimeCourse element that configure a simulation.
		4. Validation that variables referred to in a MathML expression are
		defined as variables or parameters.
	</p>
	<ns prefix='sed' uri='http://sed-ml.org/sed-ml/level1/version2' />
	<ns prefix='math' uri='http://www.w3.org/1998/Math/MathML' />

	<pattern id="UniformTimeCourse">
		<title>Checking numeric values of uniform time courses</title>
		<rule context="sed:uniformTimeCourse">
			<assert test="@initialTime &gt;= 0 ">Initial time must be >= than 0.
			</assert>
			<assert test="@outputStartTime &gt;= @initialTime">Output start time must be >= than initialTime.
			</assert>
			<assert test="@outputEndTime &gt;= @outputStartTime">Output end time must be >= than output start
				time.
			</assert>
			<assert test="@numberOfPoints &gt;= 0">There must be more than zero points output.
			</assert>
		</rule>

	</pattern>
	<xsl:key name="modelid" match="sed:model[@id]" use="@id" />
	<xsl:key name="simid" match="sed:uniformTimeCourse[@id]" use="@id" />
	<xsl:key name="steadystateid" match="sed:steadyState[@id]" use="@id" />
	<xsl:key name="onestepid" match="sed:oneStep[@id]" use="@id" />
	<xsl:key name="dgid" match="sed:dataGenerator[@id]" use="@id" />
	<xsl:key name="taskid" match="sed:task[@id]" use="@id" />
	<xsl:key name="repeatedtaskid" match="sed:repeatedTask[@id]" use="@id" />
	
	<xsl:key name="allIds" match="sed:*[@id]" use="@id"></xsl:key>

	<pattern id="targetOrSymbol">
		<title> Checking a variable has a target or a symbol, but not both.
		</title>
		<rule context="sed:variable[@target]">
			<assert test="not(@symbol)" diagnostics="notTargetAndSymbol"> Variable cannot have
				target and symbol defined.</assert>
		</rule>
		<rule context="sed:variable">
			<assert test="@target | @symbol" diagnostics="targetOrSymbol"> Variable must
				have either a target or a symbol attribute.</assert>
		</rule>
	</pattern>

	<pattern id="duplicates">
		<title>Checking no duplicate IDs </title>
		<rule context="sed:*[@id and not(ancestor::sed:newXML)]">
			<assert test="count(key('allIds', @id)) = 1" diagnostics="failedUniqueIds">
				Duplicated id in element "
				<name />
				" - "
				<value-of select='@id' />
				".
			</assert>
		</rule>
	</pattern>
	<pattern id="xreferences">
		<title>Checking cross references </title>
		<rule context="sed:task">
			<assert test="count(key('modelid', @modelReference)) = 1">
				Model reference '
				<value-of select="@modelReference"></value-of>
				' did not refer to the id of a model element.
			</assert>
			<report test="count(key('modelid', @modelReference)) = 1">
				Model reference '
				<value-of select="@modelReference"></value-of>
				' matched to a model in task '
				<value-of select="@id"></value-of>
				'.
			</report>

			<assert test="count(key('simid', @simulationReference)) 
			          +count(key('steadystateid', @simulationReference))
			          +count(key('onestepid', @simulationReference))
			           = 1">
				Simulation reference '
				<value-of select="@simulationReference"></value-of>
				' did not refer to the id of a simulation element.
			</assert>
			<report test="count(key('simid', @simulationReference)) = 1">
				Simulation reference '
				<value-of select="@simulationReference"></value-of>
				' matched to a simulation in task '
				<value-of select="@id"></value-of>
				'.
			</report>
		</rule>

		<rule context="sed:variable">
			<assert test="count(key('taskid', @taskReference)) +count(key('repeatedtaskid', @taskReference)) = 1">
				Variable '
				<value-of select="@id"></value-of>
				' referred to unknown task '
				<value-of select="@taskReference"></value-of>
				'.
			</assert>
		</rule>


		<rule context="math:ci | math:csymbol">
			<p> Check that math elements are defined in variable or parameter
				definitions
				within the enclosing dataGenerator.
			</p>
			<!-- cannot use local keys scoped within a DG element so need to recourse 
				to XPath In this expression, current() is the mathML node. There should be 
				1 entry as a parameter or variable -->
			<assert
				test=" (count (ancestor::sed:dataGenerator/sed:listOfVariables/sed:variable[@id = current()/text()]) ) + 
    	(count (ancestor::sed:dataGenerator/sed:listOfParameters/sed:parameter[@id = current()/text()]) ) + 
    	(count (ancestor::sed:repeatedTask/sed:listOfRanges/sed:*[@id = current()/text()]) ) 
    	= 1">
				Variable '
				<value-of select="text()"></value-of>
				' not found in
				.
				for
				<value-of select="text()"></value-of>
			</assert>
		</rule>

		<rule context="sed:dataSet">
			<assert test="count(key('dgid', @dataReference)) = 1">
				Data reference '
				<value-of select="@dataReference"></value-of>
				' did not refer to the id of a DataGenerator element.
			</assert>
		</rule>

		<rule context="sed:curve">
			<assert test="count(key('dgid', @xDataReference)) = 1">
				X Data reference '
				<value-of select="@xDataReference"></value-of>
				' did not refer to the id of a DataGenerator element.
			</assert>
			<assert test="count(key('dgid', @yDataReference)) = 1">
				Y Data reference '
				<value-of select="@yDataReference"></value-of>
				' did not refer to the id of a DataGenerator element.
			</assert>
		</rule>

		<rule context="sed:surface">
			<assert test="count(key('dgid', @xDataReference)) = 1">
				X Data reference '
				<value-of select="@xDataReference"></value-of>
				' did not refer to the id of a DataGenerator element.
			</assert>
			<assert test="count(key('dgid', @yDataReference)) = 1">
				Y Data reference '
				<value-of select="@yDataReference"></value-of>
				' did not refer to the id of a DataGenerator element.
			</assert>
			<assert test="count(key('dgid', @yDataReference)) = 1">
				Z Data reference '
				<value-of select="@zDataReference"></value-of>
				' did not refer to the id of a DataGenerator element.
			</assert>
		</rule>

	</pattern>
	<diagnostics>
		<diagnostic id="failedUniqueIds">
			The Id '
			<value-of select="@id"></value-of>
			' for the element
			<name />
			is not unique in this document. To be valid SED-ML,
			all Id attribute values should be unique.
		</diagnostic>
		<diagnostic id="notTargetAndSymbol">
			The
			<name />
			with id '
			<value-of select="@id"></value-of>
			' must have either a target XPath expression, identifying a model
			variable,
			or a symbol, representing an implicit variable, but not both.
		</diagnostic>
		<diagnostic id="targetOrSymbol">
			The
			<name />
			with id '
			<value-of select="@id"></value-of>
			' must have either a target XPath expression, identifying a model
			variable,
			or a symbol, representing an implicit variable.
		</diagnostic>

		<diagnostic id="cyclicalModelRefs">
			Models '
			<value-of select="@id"></value-of>
			' and '
			<value-of select="@source"></value-of>
			'
			both refer to each other for the source of the model, leading to a cycle.
			Cycles are not permitted for model source attributes.
		</diagnostic>
	</diagnostics>
</schema>
